name: Java Application Deployment on GKE using GitHub Acrions

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
    
env:
  DATREE_TOKEN: ${{ secrets.DATREE_TOKEN }} 
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: devops    # TODO: update to cluster name
  GKE_ZONE: us-central1-c	   # TODO: update to cluster zone
  DEPLOYMENT_NAME: myapp-deployment # TODO: update deployment name if changed in deployment.yaml
  IMAGE_TAG: ${{ github.run_number }}

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'adopt'
        cache: maven
    - name: Grant execute permission for POM file
      run: chmod +x pom.xml    
    - name: Build with Maven
      run: mvn clean package --file pom.xml
    - name: Run Test cases
      run: mvn test --file pom.xml
#    - name: SonarQube Scan
#      uses: sonarsource/sonarqube-scan-action@master
#      env:
#        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#    - name: SonarQube Quality Gate check
#      uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time
#      timeout-minutes: 5
#      env:
#       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: Install Datree
      run: curl https://get.datree.io | /bin/bash
        
    - name: Run Datree's policy check
      run: datree test kube.yaml
      
    - name: Create a temp directory
      run: mkdir downloads
      
    - name: Add artifacts to publish to the github
      run: |
         cd downloads
         pwd
         cp /home/runner/work/springboot-githubactions/springboot-githubactions/target/spring-boot-hello-world-1.0.0-SNAPSHOT.jar /home/runner/work/springboot-githubactions/springboot-githubactions/downloads/mapp.jar
         cd ..
         
    - name: Uplad Github Artifact
      uses: actions/upload-artifact@v2.2.4
      with:
        tag_name: springapp:${{ github.run_number }}
        path: downloads
        
#    - name: Extract release notes
#      id: extract_release_notes
#      uses: ffurrer2/extract-release-notes@v1
      
    - name: Create release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          tag_name: springapp:${{ github.run_number }}
          release_name: springapp:${{ github.run_number }}
          draft: false
          prerelease: false
          body: ${{ steps.extract-release-notes.outputs.release_notes }}
    
    - name: Generate docker image
      uses: actions/checkout@v2
    - name: Build the Docker image
      run: docker build --file Dockerfile -t springapp:${{ github.run_number }} .
      
    - name: Publish to Registry
      uses: elgohr/Publish-Docker-Github-Action@master
      with:
        name: anuj23/githubactions/springapp:${{ github.run_number }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - uses: google-github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Get the GKE credentials so we can deploy to the cluster
    - run: |-
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
    # Deploy sample image to the GKE cluster
    - name: Deploy
      run: |-
        sed -i 's/tagversion/${{ github.run_number }}/g' serviceLB.yaml
        kubectl apply -f serviceLB.yaml
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide

